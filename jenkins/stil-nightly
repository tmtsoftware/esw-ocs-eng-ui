pipeline {
    agent {
        label 'master'
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                sh "git checkout $VERSION"
                sh "git pull origin $VERSION"
            }
        }

        stage('Install') {
            steps {
                //sh "./scripts/install_node.sh"
                //sh "./scripts/install_chrome.sh"
                sh "which node && node --version"
                sh "which npm && npm --version"
                sh "which google-chrome && google-chrome --version"
                sh "which npx && npx --version"
                sh "npm ci"
                sh "npx browserslist"
            }
        }

        stage('Build library') {
            steps {
                sh "npm run build"
            }
        }

        stage('Unit tests') {
            steps {
                sh "npm run xxx1"
                sh "npm run test:ciJenkins"
            }
        }
    }
    post {
        always {
            sh "redis-server --version"
            // upload test coverage
            publishHTML(target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: false,
                keepAll              : true,
                reportDir            : './coverage/lcov-report',
                reportFiles          : 'index.html',
                reportName           : "Coverage Report"
            ])

            // Generate RTM
            sh "./rtm.sh"

            // Upload RTM
            publishHTML(target: [
              alwaysLinkToLastBuild: false,
              keepAll              : true,
              reportDir            : './RTM/',
              reportFiles          : 'index.html',
              reportName           : "Test-Story-Requirement mapping"
            ])
            script {
                sendNotification(currentBuild.result)
            }
        }
    }
}

def sendNotification(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESS'

    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME}' [${VERSION}] [${env.BUILD_NUMBER}]"
    def summary = "${subject} (${env.BUILD_URL})"

    // override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESS') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }
    slackSend(channel: "#${SLACK_CH}", color: colorCode, message: summary)
}
